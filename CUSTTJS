import React from 'react';
import {
    ScrollView,
    View,
    Text,
    FlatList,
    Alert,
    TouchableOpacity,
    TextInput,
    StyleSheet,
    Dimensions,
    TouchableHighlight,
    handleTouchItem,
} from 'react-native';

import {StackNavigator} from 'react-navigation';
import MenuButtonWS from '../Components/MenuButtonWS';
import Ionicons from  'react-native-vector-icons/Ionicons';
import { 
    Input,
    ListItem,
    ButtonGroup,
} from 'react-native-elements';
import Icon from 'react-native-vector-icons/FontAwesome';
import AsyncStorage from '@react-native-community/async-storage';

const numColumns = 3
const WIDTH = Dimensions.get('window').width

export default class Tables extends React.Component {

    constructor(props) {
        super(props);
        this.array = [],
        this.party = [],
        this.state = {
            arrayHolder: [],
            party: [],
            disabled: true,
            textInput_Holder: '',
            selectedIndex: 2,
        }
        this.updateIndex = this.updateIndex.bind(this)
    }

    updateIndex (selectedIndex) {
        this.setState({selectedIndex})
        this._addTable(selectedIndex)
        this._setTable2(selectedIndex)
        this._clearParty(selectedIndex)
    }

    componentDidMount() {
        this.setState({ arrayHolder: [...this.array]})
    }
    

    handleQueryChange = (textInput_Holder) => {
        this.setState(state => ({ ...state, textInput_Holder: textInput_Holder || " "}));
    }

    _addTable = (index) => {
        if (index === 0) {
            this.array.push({Table : this.state.textInput_Holder});
            for (var i = 0; i < this.array.length; i++) {
                this.setState({ arrayHolder: [...this.array] });
                console.log(this.array); 
            }
        }
    }

    _clearTable = () => {
        this.handleQueryChange("");
    }

    _clearParty = async (index) => {
        if (index === 2) {
            this.props = '';
            console.log(this.props);
        }
    }

    _setTable2 = async (index) => {
        if (index === 1) {
            const  { navigation } = this.props;
            const cust = navigation.getParam('cust_ID', 'No-User');
            const other_param = navigation.getParam('otherParam', 'No-User');

            const cust1 = JSON.stringify(cust);
            const cust2 = cust1.replace(/[\])}[{(]/g, '');
            const cust3 = cust2.replace(/[""]/g, '');
            
            try {
                await AsyncStorage.setItem('cust3', cust3)
                let Tab = [this.array];
                let TAC = Tab.concat([cust3]);
                this.state.party.push([cust3]);
                for (var i = 0; i < this.state.party.length; i++) {
                    this.setState({ party: [...this.state.party]})
                    console.log(this.state.party.join('\r\n'));
                    return this.state.party.join('\r\n');
                }
                
            } catch(error) {
                console.log('There is a problem', error.message);
            }
        }
            
    }

    _setTable = async (index) => {
        while(true){
            const  { navigation } = this.props;
            const cust = navigation.getParam('cust_ID', 'No-User');
            const other_param = navigation.getParam('otherParam', 'No-User');
            const cust1 = JSON.stringify(cust);
            const cust2 = cust1.replace(/[\])}[{(]/g, '');
            const cust3 = cust2.replace(/[""]/g, '');
            if (index ===1) {
                this.party.push([cust3]);
                break;
            }
            console.log(this.party);
        }
    }
     
     _openTable = async () => {
        try {
            const partyGroup = await AsyncStorage.getItem('cust3');
            this.props.navigation.navigate('ViewParty', {
                TAC1: partyGroup,
                otherParam: '101',
            });
        } catch(error) {
            console.log('No Table', error.message)
        }
     }

    render() {
        const  { navigation } = this.props;
        const cust = navigation.getParam('cust_ID', 'No-User');
        const other_param = navigation.getParam('otherParam', 'No-User');

        const cust1 = JSON.stringify(cust);
        const cust2 = cust1.replace(/[\])}[{(]/g, '');
        const cust3 = cust2.replace(/[""]/g, '');

        const buttons = ['Add', 'Set', 'Clear']
        const { selectedIndex } = this.state
        
        return (
            <View style={styles.container}>
                <MenuButtonWS navigation={this.props.navigation} />

                <Input
                    style={styles.textInput} 
                    placeholder='Table Number'
                    leftIcon={
                        <Icon
                        name='table' 
                        size={24}
                        color='black'
                        />
                    }
                    rightIcon={
                        <Icon 
                        name='chevron-left'
                        size={15}
                        color='black'
                        onPress={this._clearTable}
                        />
                    }
                    onChangeText={ (textInput_Holder) => this.setState({textInput_Holder})}
                    value={this.state.textInput_Holder}
                    underlineColorAndroid='transparent'
                />

                <ButtonGroup 
                onPress={this.updateIndex}
                selectedIndex={selectedIndex}
                selectedButtonStyle={{backgroundColor: 'blue'}}
                buttons={buttons}
                containerStyle={styles.buttonGroup}
                />

                
                <FlatList
                    data={this.state.arrayHolder}
                    keyExtractor={(item, index) => index.toString()}
                    //numColumns={numColumns}
                    renderItem={({item, index }) => (
                        <ListItem
                        titleStyle={{ color: 'black', fontWeight: 'bold'}}
                        title={item.Table}
                        onPress={this._openTable}
                        bottomDivider
                        chevron
                        />
                    )}
                />    
            </View>
        )
    }

}
