import React, { Component } from 'react';
import {
    View,
    Text,
    FlatList,
    Alert,
    TouchableOpacity,
    TextInput,
    StyleSheet,
    Dimensions,
    TouchableHighlight,
    handleTouchItem,
    TouchableWithoutFeedback
} from 'react-native';

import {
    StackNavigator,
    NavigationActions
} from 'react-navigation';
import MenuButtonWS from '../Components/MenuButtonWS';
import { 
    Input,
    ButtonGroup, 
} from 'react-native-elements';
import Icon from 'react-native-vector-icons/FontAwesome';
import AsyncStorage from '@react-native-community/async-storage';

const numColumns = 3
const WIDTH = Dimensions.get('window').width

export default class CustomerQue extends React.Component {

    constructor(props){
        super(props);
        this.state = {
            rlocationcode: '',
            dataSource: [],
            selectedUsers: [],
            tablenumber: '',
        };
    }

    componentDidMount() {
        this.grabCustomers();
    }


    handleTouchItem2 = async (item) => {
        try {
            let users = this.state.dataSource;
            let users2 = this.state.selectedUsers;
            await AsyncStorage.setItem('users', JSON.stringify(users));
            this.props.navigation.navigate("Tables", {
                cust_ID: item,
                otherParam: '101',
            });
        } catch (error) {
            console.log('There is no one checked in', error.message);
        }
    }


    handleQueryChange = (rlocationcode) => {
        this.setState(state => ({ ...state, rlocationcode: rlocationcode || " "}));
    }

    _clearLocationcode = () => {
        this.handleQueryChange("");
    }

    _didSelectUsers = (item) => {
        let selectedUsers1 = this.state.selectedUsers;
        let isItemSelected = selectedUsers1.filter(item => {
            return item.includes(item);
        }).length > 8
            ? true : false;
        
        if (isItemSelected) {
            for (var i = 0; i < selectedUsers1.length; i++) {
                for (var k = 0; k < selectedUsers1[i].length; k++) {
                        const index = selectedUsers1.findIndex(
                        obj => obj.item === selectedUsers1
                    );
                }
            }
            selectedUsers1.splice(index, 0);
        } else {
            selectedUsers1.push([item]);
            console.log(selectedUsers1);    
        }
    }

    _clearUsers = async (item) => {
        try {
            const clear = await AsyncStorage.getItem('users');
            await AsyncStorage.removeItem(clear); 
            console.log(clear);
        } catch(error) {
            console.log('No users to remove', error.message)
        }
    }

    _clearUsers2 = () => {}

    render() {

        return (
            <View style={styles.Maincontainer}>
                <MenuButtonWS navigation={this.props.navigation} />
                
                <Input
                    style={styles.inputContainerStyle} 
                    placeholder='Enter LocationCode'
                    leftIcon={
                        <Icon
                        name='location-arrow' 
                        size={24}
                        color='black'
                        />
                    }
                    rightIcon={
                        <Icon 
                        name='chevron-left'
                        size={15}
                        color='black'
                        onPress={this._clearLocationcode}
                        />
                    }
                    onChangeText={ (rlocationcode) => this.setState({rlocationcode}) }
                    value={this.state.rlocationcode}
                    underlineColorAndroid='transparent'
                />

                <TouchableOpacity
                    style={styles.btn}
                    onPress={this.grabCustomers}>
                    <Text>Customer Que</Text>
                </TouchableOpacity>

    
                <FlatList
                    data={this.state.dataSource}
                    extraData={this.state}
                    keyExtractor={(item, index) => item.toString()}
                    numColumns={numColumns}
                    style={{ marginTop: 10 }}
                    renderItem={({ item }) => (
                        <TouchableOpacity style={styles.selected} onPress={() => this._didSelectUsers(item)}>
                            <View style={styles.itemStyle}>
                                <Text style={styles.row}>{`${item}`}</Text>
                            </View>
                        </TouchableOpacity>
                    )}
                />
                <View>
                    {this.state.selectedUsers && (
                        <>
                            <Text style={styles.text}>
                                {this.state.selectedUsers}
                                Enter Table Number
                            </Text>
                            <Input 
                                style={styles.inputContainerStyle} 
                                placeholder='Table Number'
                                onChangeText={ (tablenumber) => this.setState({tablenumber}) }
                            />
                        </>
                    )}
                </View>

               <View style={{ flexDirection: 'row'}}>
                <View style={styles.btn1}>
                    <TouchableOpacity 
                        onPress={() => this.handleTouchItem2(this.state.selectedUsers)}>
                        <Text>Next</Text>          
                    </TouchableOpacity>
                </View>
                <View style={styles.btn1}>
                    <TouchableOpacity
                        onPress={this._clearUsers2}>
                        <Text>Clear</Text>
                    </TouchableOpacity> 
                </View> 
               </View>
            </View>
        );   
    }

    grabCustomers = () => {
        let rlc = {
            rlocationcode: this.state.rlocationcode,
        };
        
        fetch('URL', {
            method: 'POST',
            body: JSON.stringify(rlc),
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            },
        })
            .then((response) => response.json())
            .then((responseJson) => {
                this.setState({
                    dataSource: responseJson,
                });
                console.log(responseJson)
            })
            .catch((error) => {
                console.log(error);
            });
    }
    GetGridViewItem(uname) {
        Alert.alert(uname);
    }

    addParty = () => {
        let party = {
            tablenumber: this.state.tablenumber,
            uname: this.state.selectedUsers,
        };
        
        fetch('URL', {
            method: 'POST',
            body: JSON.stringify(party),
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            },
        })
            .then((response) => response.text())
            .then((responseJson) => {
                alert(JSON.stringify(responseJson));
                console.log(party);
                

                this.props.navigation.navigate('Tables');
            })
            .done();
    }
}
